const apiUrl = "http://127.0.0.1:5000";
let sessionId = "";
let apiKey = "API-KEY"; // Replace with a valid API key
let history = [];

// Emotion-to-emoji mapping
const emotionToEmoji = {
  happy: "üòä",
sad: "üò¢",
angry: "üò†",
neutral: "üòê",
surprised: "üò≤",
confused: "üòï",
excited: "üòÑ",
bored: "üò¥",
relieved: "üòå",
nervous: "üò¨",
scared: "üò®",
disappointed: "üòû",
hopeful: "ü§û",
amused: "üòÜ",
embarrassed: "üò≥",
ashamed: "üò≥",
proud: "üòå",
grateful: "üôè",
determined: "üí™",
frustrated: "üò£",
guilty: "üòî",
inspired: "üåü",
lonely: "üòî",
jealous: "üòí",
annoyed: "üò§",
optimistic: "üòÅ",
overwhelmed: "üò©",
loved: "üòç",
curious: "ü§î",
content: "üòå",
playful: "üòú",
satisfied: "üòã",
sympathetic: "ü§ó",
affectionate: "ü•∞",
fearful: "üò±",
disgusted: "ü§¢",
confident: "üòé",
embittered: "üòñ",
skeptical: "ü§®",
thoughtful: "ü§î",
shocked: "üò±",
melancholic: "üòî",
insecure: "üòü",
stressed: "üò´",
apologetic: "üôè",
peaceful: "üòá",
apathetic: "üò∂",
nostalgic: "ü•≤",
exhausted: "üò´",
motivated: "üî•",
mischievous: "üòè",
regretful: "üòî",
awed: "üòÆ",
craving: "üòã",
heartbroken: "üíî",
sarcastic: "üòú",
  // Additional emotions can be added dynamically
};

// Function to initialize a new session with user-defined parameters
async function createSession() {
  // Retrieve user-defined parameters
  const name = document.getElementById("botName").value || "EmotionBot";
  const personality =
    document.getElementById("personality").value || "friendly";
  // const emotionSet = document.getElementById('emotionSet').value.split(',').map(e => e.trim());
  const model = document.getElementById("model").value || "gemini";

  // Set custom instruction based on the selected emotions
  const customInstruction = `Please respond by expressing an emotion using only one of the options listed in ${Object.keys(emotionToEmoji)}. Avoid adding any additional words or explanations. Ensure your response is clear, unambiguous, and directly represents the intended emotion using a single emoji from the provided set.`;

  // Create session API call
  const response = await fetch(`${apiUrl}/create_session`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      api_key: apiKey,
      name,
      personality,
      client_maintains_history: true,
      custom_instruction: customInstruction,
      model,
    }),
  });

  const data = await response.json();
  sessionId = data.session_id;
  if (!sessionId) alert("Error creating session");

  document.querySelector(".config-form").style.display = "none";
  document.querySelector(".chat-interface").style.display = "flex";

  // // Dynamically update emotion-to-emoji mapping based on user-defined emotions
  // emotionSet.forEach(emotion => {
  //   if (!emotionToEmoji[emotion]) emotionToEmoji[emotion] = 'üòê';  // Default to neutral emoji if not defined
  // });
}

/// Function to send a message
async function sendMessage() {
  const message = document.getElementById("userMessage").value;
  if (!message || !sessionId) return;

  // Display user's message
  displayMessage(message, "user");
  document.getElementById("userMessage").value = "";

  // Send message to API
  history.push({ user: message });
  const response = await fetch(`${apiUrl}/send_message`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ session_id: sessionId, message, history }),
  });

  const data = await response.json();
  const [botResponse, userEmotion, modelEmotion] = data.response;

  // Display bot's response
  displayMessage(botResponse, "bot");
  history.push({ bot: botResponse });

  // Update the emoji display for the bot's emotion
  updateEmojiDisplay(modelEmotion);
}

// Function to end session
async function endSession() {
  if (!sessionId) return;

  await fetch(`${apiUrl}/end_session`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ session_id: sessionId }),
  });

  sessionId = "";
  history = [];
  document.getElementById("chatWindow").innerHTML = "";
  document.getElementById("emojiDisplay").textContent = "üòê"; // Reset emoji to neutral
  alert("Session ended");
}

// Utility function to display messages in the chat window
function displayMessage(text, sender) {
  const messageDiv = document.createElement("div");
  messageDiv.classList.add("message", sender);
  messageDiv.textContent = text;
  document.getElementById("chatWindow").appendChild(messageDiv);
  document.getElementById("chatWindow").scrollTop =
    document.getElementById("chatWindow").scrollHeight;
}

// Utility function to map emotion state to emoji
function getEmojiForEmotion(emotion) {
  return emotionToEmoji[emotion] || "üòê"; // Default to neutral if no match
}

// Update the emoji display with the current emotion emoji
function updateEmojiDisplay(emotion) {
  const emoji = getEmojiForEmotion(emotion);
  document.getElementById("emojiDisplay").textContent = emoji;
}
